-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local Main = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local Frame = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local Logo = Instance.new("ImageLabel")
local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
local Welcome = Instance.new("TextLabel")
local V = Instance.new("TextLabel")
local Note = Instance.new("TextLabel")
local Buttons = Instance.new("Frame")
local UICorner_3 = Instance.new("UICorner")
local Frame_2 = Instance.new("Frame")
local UICorner_4 = Instance.new("UICorner")
local Player = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local Admin = Instance.new("TextButton")
local UICorner_6 = Instance.new("UICorner")
local LOLOLOL = Instance.new("TextButton")
local UICorner_7 = Instance.new("UICorner")
local Player_2 = Instance.new("Frame")
local UICorner_8 = Instance.new("UICorner")
local JP = Instance.new("TextBox")
local UICorner_9 = Instance.new("UICorner")
local Number = Instance.new("TextLabel")
local Walkspeed = Instance.new("TextButton")
local UICorner_10 = Instance.new("UICorner")
local JumpPower = Instance.new("TextButton")
local UICorner_11 = Instance.new("UICorner")
local Fly = Instance.new("TextButton")
local UICorner_12 = Instance.new("UICorner")
local Noclip = Instance.new("TextButton")
local UICorner_13 = Instance.new("UICorner")
local Walkspeed2 = Instance.new("TextBox")
local UICorner_14 = Instance.new("UICorner")
local Number2 = Instance.new("TextLabel")
local Admin_2 = Instance.new("Frame")
local UICorner_15 = Instance.new("UICorner")
local CMDX = Instance.new("TextButton")
local UICorner_16 = Instance.new("UICorner")
local infiniteyield = Instance.new("TextButton")
local UICorner_17 = Instance.new("UICorner")
local Scripts = Instance.new("Folder")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Main.Name = "Main"
Main.Parent = ScreenGui
Main.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Main.Position = UDim2.new(0.185000002, 0, 0.187999994, 0)
Main.Size = UDim2.new(0, 614, 0, 532)

UICorner.Parent = Main

Frame.Name = "-"
Frame.Parent = Main
Frame.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
Frame.Position = UDim2.new(-0.0167065356, 0, -0.0176757574, 0)
Frame.Size = UDim2.new(0, 617, 0, 530)

UICorner_2.Parent = Frame

Logo.Name = "Logo"
Logo.Parent = Frame
Logo.AnchorPoint = Vector2.new(0.5, 1)
Logo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Logo.BackgroundTransparency = 1.000
Logo.Position = UDim2.new(0.513679266, 0, 0.525976539, 0)
Logo.Size = UDim2.new(0.412681073, 0, 0.408075184, 0)
Logo.Image = "http://www.roblox.com/asset/?id=6651012767"

UIAspectRatioConstraint.Parent = Logo

Welcome.Name = "Welcome"
Welcome.Parent = Frame
Welcome.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Welcome.BackgroundTransparency = 1.000
Welcome.Position = UDim2.new(0.183144242, 0, 0.592452705, 0)
Welcome.Size = UDim2.new(0, 408, 0, 50)
Welcome.Font = Enum.Font.DenkOne
Welcome.Text = "Welcome to Coke Hub, Universal GUI"
Welcome.TextColor3 = Color3.fromRGB(74, 255, 8)
Welcome.TextScaled = true
Welcome.TextSize = 14.000
Welcome.TextStrokeTransparency = 0.000
Welcome.TextWrapped = true

V.Name = "V"
V.Parent = Frame
V.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
V.BackgroundTransparency = 1.000
V.Position = UDim2.new(0.777957857, 0, 0.954716861, 0)
V.Size = UDim2.new(0, 111, 0, 24)
V.Font = Enum.Font.DenkOne
V.Text = "v.1.3 [Public Release]"
V.TextColor3 = Color3.fromRGB(255, 255, 255)
V.TextScaled = true
V.TextSize = 14.000
V.TextStrokeTransparency = 0.000
V.TextWrapped = true

Note.Name = "Note"
Note.Parent = Frame
Note.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Note.BackgroundTransparency = 1.000
Note.Position = UDim2.new(0.306320906, 0, 0.686792314, 0)
Note.Size = UDim2.new(0, 256, 0, 46)
Note.Font = Enum.Font.DenkOne
Note.Text = "Press Q to open and close"
Note.TextColor3 = Color3.fromRGB(255, 255, 255)
Note.TextScaled = true
Note.TextSize = 14.000
Note.TextStrokeTransparency = 0.000
Note.TextWrapped = true

Buttons.Name = "Buttons"
Buttons.Parent = Main
Buttons.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Buttons.Position = UDim2.new(1.04053247, 0, -8.30590725e-05, 0)
Buttons.Size = UDim2.new(0, 328, 0, 532)

UICorner_3.Parent = Buttons

Frame_2.Name = "-"
Frame_2.Parent = Buttons
Frame_2.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
Frame_2.Position = UDim2.new(-0.0167065132, 0, -0.0176757574, 0)
Frame_2.Size = UDim2.new(0, 326, 0, 530)

UICorner_4.Parent = Frame_2

Player.Name = "Player"
Player.Parent = Buttons
Player.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
Player.Position = UDim2.new(0.170482725, 0, 0.0986982286, 0)
Player.Size = UDim2.new(0, 216, 0, 61)
Player.Font = Enum.Font.Fantasy
Player.Text = "Player"
Player.TextColor3 = Color3.fromRGB(255, 255, 255)
Player.TextScaled = true
Player.TextSize = 14.000
Player.TextStrokeTransparency = 0.000
Player.TextWrapped = true

UICorner_5.Parent = Player

Admin.Name = "Admin"
Admin.Parent = Buttons
Admin.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
Admin.Position = UDim2.new(0.170482725, 0, 0.245314777, 0)
Admin.Size = UDim2.new(0, 216, 0, 61)
Admin.Font = Enum.Font.Fantasy
Admin.Text = "Admin Scripts"
Admin.TextColor3 = Color3.fromRGB(255, 255, 255)
Admin.TextScaled = true
Admin.TextSize = 14.000
Admin.TextStrokeTransparency = 0.000
Admin.TextWrapped = true

UICorner_6.Parent = Admin

LOLOLOL.Name = "LOLOLOL"
LOLOLOL.Parent = Buttons
LOLOLOL.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
LOLOLOL.Position = UDim2.new(0.173531502, 0, 0.386292219, 0)
LOLOLOL.Size = UDim2.new(0, 216, 0, 61)
LOLOLOL.Font = Enum.Font.Fantasy
LOLOLOL.Text = "ESP"
LOLOLOL.TextColor3 = Color3.fromRGB(255, 255, 255)
LOLOLOL.TextScaled = true
LOLOLOL.TextSize = 14.000
LOLOLOL.TextStrokeTransparency = 0.000
LOLOLOL.TextWrapped = true

UICorner_7.Parent = LOLOLOL

Player_2.Name = "Player"
Player_2.Parent = Main
Player_2.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
Player_2.Position = UDim2.new(-0.0167065356, 0, -0.0176757574, 0)
Player_2.Size = UDim2.new(0, 617, 0, 530)
Player_2.Visible = false

UICorner_8.Parent = Player_2

JP.Name = "JP"
JP.Parent = Player_2
JP.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
JP.Position = UDim2.new(0.0777957737, 0, 0.769811273, 0)
JP.Size = UDim2.new(0, 225, 0, 58)
JP.Font = Enum.Font.Fantasy
JP.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
JP.PlaceholderText = "Jumppower Here"
JP.Text = ""
JP.TextColor3 = Color3.fromRGB(255, 255, 255)
JP.TextScaled = true
JP.TextSize = 14.000
JP.TextStrokeTransparency = 0.000
JP.TextWrapped = true

UICorner_9.Parent = JP

Number.Name = "Number"
Number.Parent = Player_2
Number.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Number.BackgroundTransparency = 1.000
Number.Position = UDim2.new(0.628849328, 0, 0.879245162, 0)
Number.Size = UDim2.new(0, 200, 0, 50)
Number.Font = Enum.Font.DenkOne
Number.Text = "0"
Number.TextColor3 = Color3.fromRGB(74, 255, 8)
Number.TextScaled = true
Number.TextSize = 14.000
Number.TextStrokeTransparency = 0.000
Number.TextWrapped = true

Walkspeed.Name = "Walkspeed"
Walkspeed.Parent = Player_2
Walkspeed.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
Walkspeed.Position = UDim2.new(0.654813945, 0, 0.700691402, 0)
Walkspeed.Size = UDim2.new(0, 167, 0, 27)
Walkspeed.Font = Enum.Font.Fantasy
Walkspeed.Text = "Set WalkSpeed"
Walkspeed.TextColor3 = Color3.fromRGB(255, 255, 255)
Walkspeed.TextScaled = true
Walkspeed.TextSize = 14.000
Walkspeed.TextStrokeTransparency = 0.000
Walkspeed.TextWrapped = true

UICorner_10.Parent = Walkspeed

JumpPower.Name = "JumpPower"
JumpPower.Parent = Player_2
JumpPower.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
JumpPower.Position = UDim2.new(0.122999966, 0, 0.702566028, 0)
JumpPower.Size = UDim2.new(0, 167, 0, 27)
JumpPower.Font = Enum.Font.Fantasy
JumpPower.Text = "Set JumpPower"
JumpPower.TextColor3 = Color3.fromRGB(255, 255, 255)
JumpPower.TextScaled = true
JumpPower.TextSize = 14.000
JumpPower.TextStrokeTransparency = 0.000
JumpPower.TextWrapped = true

UICorner_11.Parent = JumpPower

Fly.Name = "Fly"
Fly.Parent = Player_2
Fly.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
Fly.Position = UDim2.new(0.602950037, 0, 0.168615937, 0)
Fly.Size = UDim2.new(0, 216, 0, 61)
Fly.Font = Enum.Font.Fantasy
Fly.Text = "Fly [E]"
Fly.TextColor3 = Color3.fromRGB(255, 255, 255)
Fly.TextScaled = true
Fly.TextSize = 14.000
Fly.TextStrokeTransparency = 0.000
Fly.TextWrapped = true

UICorner_12.Parent = Fly

Noclip.Name = "Noclip"
Noclip.Parent = Player_2
Noclip.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
Noclip.Position = UDim2.new(0.0762077272, 0, 0.168615937, 0)
Noclip.Size = UDim2.new(0, 216, 0, 61)
Noclip.Font = Enum.Font.Fantasy
Noclip.Text = "Noclip"
Noclip.TextColor3 = Color3.fromRGB(255, 255, 255)
Noclip.TextScaled = true
Noclip.TextSize = 14.000
Noclip.TextStrokeTransparency = 0.000
Noclip.TextWrapped = true

UICorner_13.Parent = Noclip

Walkspeed2.Name = "Walkspeed2"
Walkspeed2.Parent = Player_2
Walkspeed2.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
Walkspeed2.Position = UDim2.new(0.602917373, 0, 0.769811273, 0)
Walkspeed2.Size = UDim2.new(0, 225, 0, 58)
Walkspeed2.Font = Enum.Font.Fantasy
Walkspeed2.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
Walkspeed2.PlaceholderText = "Walkspeed Here"
Walkspeed2.Text = ""
Walkspeed2.TextColor3 = Color3.fromRGB(255, 255, 255)
Walkspeed2.TextScaled = true
Walkspeed2.TextSize = 14.000
Walkspeed2.TextStrokeTransparency = 0.000
Walkspeed2.TextWrapped = true

UICorner_14.Parent = Walkspeed2

Number2.Name = "Number2"
Number2.Parent = Player_2
Number2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Number2.BackgroundTransparency = 1.000
Number2.Position = UDim2.new(0.0972447395, 0, 0.879245162, 0)
Number2.Size = UDim2.new(0, 200, 0, 50)
Number2.Font = Enum.Font.DenkOne
Number2.Text = "0"
Number2.TextColor3 = Color3.fromRGB(74, 255, 8)
Number2.TextScaled = true
Number2.TextSize = 14.000
Number2.TextStrokeTransparency = 0.000
Number2.TextWrapped = true

Admin_2.Name = "Admin"
Admin_2.Parent = Main
Admin_2.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
Admin_2.Position = UDim2.new(-0.0167065356, 0, -0.0176757574, 0)
Admin_2.Size = UDim2.new(0, 617, 0, 530)
Admin_2.Visible = false

UICorner_15.Parent = Admin_2

CMDX.Name = "CMD-X"
CMDX.Parent = Admin_2
CMDX.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
CMDX.Position = UDim2.new(0.0664832518, 0, 0.115785748, 0)
CMDX.Size = UDim2.new(0, 216, 0, 61)
CMDX.Font = Enum.Font.Fantasy
CMDX.Text = "CMD-X"
CMDX.TextColor3 = Color3.fromRGB(255, 255, 255)
CMDX.TextScaled = true
CMDX.TextSize = 14.000
CMDX.TextStrokeTransparency = 0.000
CMDX.TextWrapped = true

UICorner_16.Parent = CMDX

infiniteyield.Name = "infiniteyield"
infiniteyield.Parent = Admin_2
infiniteyield.BackgroundColor3 = Color3.fromRGB(195, 195, 195)
infiniteyield.Position = UDim2.new(0.0664832518, 0, 0.262955546, 0)
infiniteyield.Size = UDim2.new(0, 216, 0, 61)
infiniteyield.Font = Enum.Font.Fantasy
infiniteyield.Text = "Infinite Yield"
infiniteyield.TextColor3 = Color3.fromRGB(255, 255, 255)
infiniteyield.TextScaled = true
infiniteyield.TextSize = 14.000
infiniteyield.TextStrokeTransparency = 0.000
infiniteyield.TextWrapped = true

UICorner_17.Parent = infiniteyield

Scripts.Name = "Scripts"
Scripts.Parent = ScreenGui

-- Scripts:

local function MKIJJ_fake_script() -- Logo.changer 
	local script = Instance.new('Script', Logo)

	
	while true do
	script.Parent.ImageColor3 = Color3.new(1,0,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.2,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.3,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.4,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.5,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.6,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.7,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.8,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0.9,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.9,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.8,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.7,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.6,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.5,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.4,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.3,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.2,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.1,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.2)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.3)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.4)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.5)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.6)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.7)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.8)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,0.9)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,1,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.9,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.8,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.7,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.6,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.5,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.4,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.3,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.2,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0.1,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.1,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.2,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.3,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.4,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.5,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.6,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.7,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.8,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(0.9,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,1)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.9)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.8)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.7)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.6)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.5)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.4)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.3)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.2)
	wait(0.01)
	script.Parent.ImageColor3 = Color3.new(1,0,0.1)
	wait(0.01)
	end
	
end
coroutine.wrap(MKIJJ_fake_script)()
local function HWVHCC_fake_script() -- Welcome.Rainbow Script! 
	local script = Instance.new('Script', Welcome)

	--[[
		Rainbow text! Make sure this script is inside of a TextLabel, TextButton, or any text GUI.
		Created by ToughRobloxUltraNoob with no help from others if you are wondering.
	--]]
	local p = script.Parent
	local d = 0.1 --Change to your delay.
	--Do not edit the following if you want the rainbow's colors to be fluent.
	local c1 = Color3.fromRGB(255,0,0)
	local c2 = Color3.fromRGB(255,125,0)
	local c3 = Color3.fromRGB(255,150,0)
	local c4 = Color3.fromRGB(255,175,0)
	local c5 = Color3.fromRGB(255,200,0)
	local c6 = Color3.fromRGB(255,225,0)
	local c7 = Color3.fromRGB(255,255,0)
	local c8 = Color3.fromRGB(225,255,0)
	local c9 = Color3.fromRGB(200,255,0)
	local c10 = Color3.fromRGB(175,255,0)
	local c11 = Color3.fromRGB(150,255,0)
	local c12 = Color3.fromRGB(125,255,0)
	local c13 = Color3.fromRGB(0,255,0)
	local c14 = Color3.fromRGB(0,255,125)
	local c15 = Color3.fromRGB(0,255,150)
	local c16 = Color3.fromRGB(0,255,175)
	local c17 = Color3.fromRGB(0,255,200)
	local c18 = Color3.fromRGB(0,255,225)
	local c19 = Color3.fromRGB(0,255,255)
	local c20 = Color3.fromRGB(0,225,255)
	local c21 = Color3.fromRGB(0,200,255)
	local c22 = Color3.fromRGB(0,175,255)
	local c23 = Color3.fromRGB(0,150,255)
	local c24 = Color3.fromRGB(0,125,255)
	local c25 = Color3.fromRGB(0,0,255)
	local c26 = Color3.fromRGB(125,0,255)
	local c27 = Color3.fromRGB(150,0,255)
	local c28 = Color3.fromRGB(175,0,255)
	local c29 = Color3.fromRGB(200,0,255)
	local c30 = Color3.fromRGB(225,0,255)
	local c31 = Color3.fromRGB(255,0,255)
	local c32 = Color3.fromRGB(255,0,225)
	local c33 = Color3.fromRGB(255,0,200)
	local c34 = Color3.fromRGB(255,0,175)
	local c35 = Color3.fromRGB(255,0,150)
	local c36 = Color3.fromRGB(255,0,125)
	
	--Main script.
	while true do
		p.TextColor3 = c1
		wait(d)
		p.TextColor3 = c2
		wait(d)
		p.TextColor3 = c3
		wait(d)
		p.TextColor3 = c4
		wait(d)
		p.TextColor3 = c5
		wait(d)
		p.TextColor3 = c6
		wait(d)
		p.TextColor3 = c7
		wait(d)
		p.TextColor3 = c8
		wait(d)
		p.TextColor3 = c9
		wait(d)
		p.TextColor3 = c10
		wait(d)
		p.TextColor3 = c11
		wait(d)
		p.TextColor3 = c12
		wait(d)
		p.TextColor3 = c13
		wait(d)
		p.TextColor3 = c14
		wait(d)
		p.TextColor3 = c15
		wait(d)
		p.TextColor3 = c16
		wait(d)
		p.TextColor3 = c17
		wait(d)
		p.TextColor3 = c18
		wait(d)
		p.TextColor3 = c19
		wait(d)
		p.TextColor3 = c20
		wait(d)
		p.TextColor3 = c21
		wait(d)
		p.TextColor3 = c22
		wait(d)
		p.TextColor3 = c23
		wait(d)
		p.TextColor3 = c24
		wait(d)
		p.TextColor3 = c25
		wait(d)
		p.TextColor3 = c26
		wait(d)
		p.TextColor3 = c27
		wait(d)
		p.TextColor3 = c28
		wait(d)
		p.TextColor3 = c29
		wait(d)
		p.TextColor3 = c30
		wait(d)
		p.TextColor3 = c31
		wait(d)
		p.TextColor3 = c32
		wait(d)
		p.TextColor3 = c33
		wait(d)
		p.TextColor3 = c34
		wait(d)
		p.TextColor3 = c35
		wait(d)
		p.TextColor3 = c36
		wait(d)
	end
end
coroutine.wrap(HWVHCC_fake_script)()
local function ZBXWU_fake_script() -- Player.LocalScript 
	local script = Instance.new('LocalScript', Player)

	local gui = script.Parent.Parent.Parent.Player
	local gui2 = script.Parent.Parent.Parent.Admin
	local placeholder = script.Parent.Parent.Parent["-"]
	
	function leftClick()
		gui.Visible = true
		gui2.Visible = false
		placeholder.Visible = false
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(ZBXWU_fake_script)()
local function GVBRKKF_fake_script() -- Admin.LocalScript 
	local script = Instance.new('LocalScript', Admin)

	local gui = script.Parent.Parent.Parent.Player
	local gui2 = script.Parent.Parent.Parent.Admin
	local placeholder = script.Parent.Parent.Parent["-"]
	
	function leftClick()
		gui.Visible = false
	    gui2.Visible = true
		placeholder.Visible = false
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(GVBRKKF_fake_script)()
local function CZHWWB_fake_script() -- LOLOLOL.LocalScript 
	local script = Instance.new('LocalScript', LOLOLOL)

	function leftClick()
		assert(Drawing, 'exploit not supported')
	
		local UserInputService = game:GetService'UserInputService';
		local HttpService = game:GetService'HttpService';
		local GUIService = game:GetService'GuiService';
		local RunService = game:GetService'RunService';
		local Players = game:GetService'Players';
		local LocalPlayer = Players.LocalPlayer;
		local Camera = workspace.CurrentCamera
		local Mouse = LocalPlayer:GetMouse();
		local Menu = {};
		local MouseHeld = false;
		local LastRefresh = 0;
		local OptionsFile = 'IC3_ESP_SETTINGS.dat';
		local Binding = false;
		local BindedKey = nil;
		local OIndex = 0;
		local LineBox = {};
		local UIButtons = {};
		local Sliders = {};
		local Dragging = false;
		local DraggingUI = false;
		local DragOffset = Vector2.new();
		local DraggingWhat = nil;
		local OldData = {};
		local IgnoreList = {};
		local Red = Color3.new(1, 0, 0);
		local Green = Color3.new(0, 1, 0);
		local MenuLoaded = false;
	
		shared.MenuDrawingData = shared.MenuDrawingData or { Instances = {} };
		shared.PlayerData = shared.PlayerData or {};
		shared.RSName = shared.RSName or ('UnnamedESP_by_ic3-' .. HttpService:GenerateGUID(false));
	
		local GetDataName = shared.RSName .. '-GetData';
		local UpdateName = shared.RSName .. '-Update';
	
		local Debounce = setmetatable({}, {
			__index = function(t, i)
				return rawget(t, i) or false
			end;
		});
	
		pcall(function() shared.InputBeganCon:disconnect() end);
		pcall(function() shared.InputEndedCon:disconnect() end);
	
		function GetMouseLocation()
			return UserInputService:GetMouseLocation();
		end
	
		function MouseHoveringOver(Values)
			local X1, Y1, X2, Y2 = Values[1], Values[2], Values[3], Values[4]
			local MLocation = GetMouseLocation();
			return (MLocation.x >= X1 and MLocation.x <= (X1 + (X2 - X1))) and (MLocation.y >= Y1 and MLocation.y <= (Y1 + (Y2 - Y1)));
		end
	
		function GetTableData(t) -- basically table.foreach i dont even know why i made this
			if typeof(t) ~= 'table' then return end
			return setmetatable(t, {
				__call = function(t, func)
					if typeof(func) ~= 'function' then return end;
					for i, v in pairs(t) do
						pcall(func, i, v);
					end
				end;
			});
		end
		local function Format(format, ...)
			return string.format(format, ...);
		end
		function CalculateValue(Min, Max, Percent)
			return Min + math.floor(((Max - Min) * Percent) + .5);
		end
	
		local Options = setmetatable({}, {
			__call = function(t, ...)
				local Arguments = {...};
				local Name = Arguments[1];
				OIndex = OIndex + 1; -- (typeof(Arguments[3]) == 'boolean' and 1 or 0);
				rawset(t, Name, setmetatable({
					Name = Arguments[1];
					Text = Arguments[2];
					Value = Arguments[3];
					DefaultValue = Arguments[3];
					AllArgs = Arguments;
					Index = OIndex;
				}, {
					__call = function(t, v)
						if typeof(t.Value) == 'function' then
							t.Value();
						elseif typeof(t.Value) == 'EnumItem' then
							local BT = Menu:GetInstance(Format('%s_BindText', t.Name));
							Binding = true;
							local Val = 0
							while Binding do
								wait();
								Val = (Val + 1) % 17;
								BT.Text = Val <= 8 and '|' or '';
							end
							t.Value = BindedKey;
							BT.Text = tostring(t.Value):match'%w+%.%w+%.(.+)';
							BT.Position = t.BasePosition + Vector2.new(t.BaseSize.X - BT.TextBounds.X - 20, -10);
						else
							local NewValue = v;
							if NewValue == nil then NewValue = not t.Value; end
							rawset(t, 'Value', NewValue);
							if Arguments[2] ~= nil then
								if typeof(Arguments[3]) == 'number' then
									local AMT = Menu:GetInstance(Format('%s_AmountText', t.Name));
									AMT.Text = tostring(t.Value);
									AMT.Position = t.BasePosition + Vector2.new(t.BaseSize.X - AMT.TextBounds.X - 10, -10);
								else
									local Inner = Menu:GetInstance(Format('%s_InnerCircle', t.Name));
									Inner.Visible = t.Value;
								end
							end
						end
					end;
				}));
			end;
		})
	
		function Load()
			local _, Result = pcall(readfile, OptionsFile);
			if _ then -- extremely ugly code yea i know but i dont care p.s. i hate pcall
				local _, Table = pcall(HttpService.JSONDecode, HttpService, Result);
				if _ then
					for i, v in pairs(Table) do
						if Options[i] ~= nil and Options[i].Value ~= nil and (typeof(Options[i].Value) == 'boolean' or typeof(Options[i].Value) == 'number') then
							Options[i].Value = v.Value;
							pcall(Options[i], v.Value);
						end
					end
				end
			end
		end
	
		Options('Enabled', 'ESP Enabled', true);
		Options('ShowTeam', 'Show Team', false);
		Options('ShowName', 'Show Names', true);
		Options('ShowDistance', 'Show Distance', true);
		Options('ShowHealth', 'Show Health', true);
		Options('ShowBoxes', 'Show Boxes', true);
		Options('ShowTracers', 'Show Tracers', true);
		Options('ShowDot', 'Show Head Dot', false);
		Options('VisCheck', 'Visibility Check', false);
		Options('Crosshair', 'Crosshair', false);
		Options('TextOutline', 'Text Outline', true);
		Options('TextSize', 'Text Size', syn and 18 or 14, 10, 24); -- cuz synapse fonts look weird???
		Options('MaxDistance', 'Max Distance', 2500, 100, 5000);
		Options('RefreshRate', 'Refresh Rate (ms)', 5, 1, 200);
		Options('MenuKey', 'Menu Key', Enum.KeyCode.F4, 1);
		Options('ResetSettings', 'Reset Settings', function()
			for i, v in pairs(Options) do
				if Options[i] ~= nil and Options[i].Value ~= nil and Options[i].Text ~= nil and (typeof(Options[i].Value) == 'boolean' or typeof(Options[i].Value) == 'number') then
					Options[i](Options[i].DefaultValue);
				end
			end
		end, 4);
		Options('LoadSettings', 'Load Settings', Load, 3);
		Options('SaveSettings', 'Save Settings', function()
			writefile(OptionsFile, HttpService:JSONEncode(Options));
		end, 2)
		-- Options.SaveSettings.Value();
	
		Load();
	
		Options('MenuOpen', nil, true);
	
		local function Set(t, i, v)
			t[i] = v;
		end
		local function Combine(...)
			local Output = {};
			for i, v in pairs{...} do
				if typeof(v) == 'table' then
					table.foreach(v, function(i, v)
						Output[i] = v;
					end)
				end
			end
			return Output
		end
		function IsStringEmpty(String)
			if type(String) == 'string' then
				return String:match'^%s+$' ~= nil or #String == 0 or String == '' or false;
			end
			return false
		end
	
		function NewDrawing(InstanceName)
			local Instance = Drawing.new(InstanceName);
			return (function(Properties)
				for i, v in pairs(Properties) do
					pcall(Set, Instance, i, v);
				end
				return Instance;
			end)
		end
	
		function Menu:AddMenuInstace(Name, Instance)
			if shared.MenuDrawingData.Instances[Name] ~= nil then
				shared.MenuDrawingData.Instances[Name]:Remove();
			end
			shared.MenuDrawingData.Instances[Name] = Instance;
			return Instance;
		end
		function Menu:UpdateMenuInstance(Name)
			local Instance = shared.MenuDrawingData.Instances[Name];
			if Instance ~= nil then
				return (function(Properties)
					for i, v in pairs(Properties) do
						-- print(Format('%s %s -> %s', Name, tostring(i), tostring(v)));
						pcall(Set, Instance, i, v);
					end
					return Instance;
				end)
			end
		end
		function Menu:GetInstance(Name)
			return shared.MenuDrawingData.Instances[Name];
		end
	
		function LineBox:Create(Properties)
			local Box = { Visible = true }; -- prevent errors not really though dont worry bout the Visible = true thing
	
			local Properties = Combine({
				Transparency = 1;
				Thickness = 1;
				Visible = true;
			}, Properties);
	
			Box['TopLeft'] = NewDrawing'Line'(Properties);
			Box['TopRight'] = NewDrawing'Line'(Properties);
			Box['BottomLeft'] = NewDrawing'Line'(Properties);
			Box['BottomRight'] = NewDrawing'Line'(Properties);
	
			function Box:Update(CF, Size, Color, Properties)
				if not CF or not Size then return end
	
				local TLPos, Visible1 = Camera:WorldToViewportPoint((CF * CFrame.new( Size.X,  Size.Y, 0)).p);
				local TRPos, Visible2 = Camera:WorldToViewportPoint((CF * CFrame.new(-Size.X,  Size.Y, 0)).p);
				local BLPos, Visible3 = Camera:WorldToViewportPoint((CF * CFrame.new( Size.X, -Size.Y, 0)).p);
				local BRPos, Visible4 = Camera:WorldToViewportPoint((CF * CFrame.new(-Size.X, -Size.Y, 0)).p);
				-- ## BEGIN UGLY CODE
				if Visible1 then
					Box['TopLeft'].Visible = true;
					Box['TopLeft'].Color = Color;
					Box['TopLeft'].From = Vector2.new(TLPos.X, TLPos.Y);
					Box['TopLeft'].To = Vector2.new(TRPos.X, TRPos.Y);
				else
					Box['TopLeft'].Visible = false;
				end
				if Visible2 then
					Box['TopRight'].Visible = true;
					Box['TopRight'].Color = Color;
					Box['TopRight'].From = Vector2.new(TRPos.X, TRPos.Y);
					Box['TopRight'].To = Vector2.new(BRPos.X, BRPos.Y);
				else
					Box['TopRight'].Visible = false;
				end
				if Visible3 then
					Box['BottomLeft'].Visible = true;
					Box['BottomLeft'].Color = Color;
					Box['BottomLeft'].From = Vector2.new(BLPos.X, BLPos.Y);
					Box['BottomLeft'].To = Vector2.new(TLPos.X, TLPos.Y);
				else
					Box['BottomLeft'].Visible = false;
				end
				if Visible4 then
					Box['BottomRight'].Visible = true;
					Box['BottomRight'].Color = Color;
					Box['BottomRight'].From = Vector2.new(BRPos.X, BRPos.Y);
					Box['BottomRight'].To = Vector2.new(BLPos.X, BLPos.Y);
				else
					Box['BottomRight'].Visible = false;
				end
				-- ## END UGLY CODE
				if Properties then
					GetTableData(Properties)(function(i, v)
						pcall(Set, Box['TopLeft'], i, v);
						pcall(Set, Box['TopRight'], i, v);
						pcall(Set, Box['BottomLeft'], i, v);
						pcall(Set, Box['BottomRight'], i, v);
					end)
				end
			end
			function Box:SetVisible(bool)
				pcall(Set, Box['TopLeft'], 'Visible', bool);
				pcall(Set, Box['TopRight'], 'Visible', bool);
				pcall(Set, Box['BottomLeft'], 'Visible', bool);
				pcall(Set, Box['BottomRight'], 'Visible', bool);
			end
			function Box:Remove()
				self:SetVisible(false);
				Box['TopLeft']:Remove();
				Box['TopRight']:Remove();
				Box['BottomLeft']:Remove();
				Box['BottomRight']:Remove();
			end
	
			return Box;
		end
	
		function CreateMenu(NewPosition) -- Create Menu
			local function FromHex(HEX)
				HEX = HEX:gsub('#', '');
				return Color3.fromRGB(tonumber('0x' .. HEX:sub(1, 2)), tonumber('0x' .. HEX:sub(3, 4)), tonumber('0x' .. HEX:sub(5, 6)));
			end
	
			local Colors = {
				Primary = {
					Main = FromHex'424242';
					Light = FromHex'6d6d6d';
					Dark = FromHex'1b1b1b';
				};
				Secondary = {
					Main = FromHex'e0e0e0';
					Light = FromHex'ffffff';
					Dark = FromHex'aeaeae';
				};
			};
	
			MenuLoaded = false;
	
			GetTableData(UIButtons)(function(i, v)
				v.Instance.Visible = false;
				v.Instance:Remove();
			end)
			GetTableData(Sliders)(function(i, v)
				v.Instance.Visible = false;
				v.Instance:Remove();
			end)
	
			UIButtons = {};
			Sliders = {};
	
			local BaseSize = Vector2.new(300, 580);
			local BasePosition = NewPosition or Vector2.new(Camera.ViewportSize.X / 8 - (BaseSize.X / 2), Camera.ViewportSize.Y / 2 - (BaseSize.Y / 2));
	
			Menu:AddMenuInstace('CrosshairX', NewDrawing'Line'{
				Visible = false;
				Color = Color3.new(0, 1, 0);
				Transparency = 1;
				Thickness = 1;
			});
			Menu:AddMenuInstace('CrosshairY', NewDrawing'Line'{
				Visible = false;
				Color = Color3.new(0, 1, 0);
				Transparency = 1;
				Thickness = 1;
			});
	
			delay(.025, function() -- since zindex doesnt exist
				Menu:AddMenuInstace('Main', NewDrawing'Square'{
					Size = BaseSize;
					Position = BasePosition;
					Filled = false;
					Color = Colors.Primary.Main;
					Thickness = 3;
					Visible = true;
				});
			end);
			Menu:AddMenuInstace('TopBar', NewDrawing'Square'{
				Position = BasePosition;
				Size = Vector2.new(BaseSize.X, 25);
				Color = Colors.Primary.Dark;
				Filled = true;
				Visible = true;
			});
			Menu:AddMenuInstace('TopBarTwo', NewDrawing'Square'{
				Position = BasePosition + Vector2.new(0, 25);
				Size = Vector2.new(BaseSize.X, 60);
				Color = Colors.Primary.Main;
				Filled = true;
				Visible = true;
			});
			Menu:AddMenuInstace('TopBarText', NewDrawing'Text'{
				Size = 25;
				Position = shared.MenuDrawingData.Instances.TopBarTwo.Position + Vector2.new(25, 15);
				Text = 'Unnamed ESP';
				Color = Colors.Secondary.Light;
				Visible = true;
			});
			Menu:AddMenuInstace('TopBarTextBR', NewDrawing'Text'{
				Size = 15;
				Position = shared.MenuDrawingData.Instances.TopBarTwo.Position + Vector2.new(BaseSize.X - 65, 40);
				Text = 'by ic3w0lf';
				Color = Colors.Secondary.Dark;
				Visible = true;
			});
			Menu:AddMenuInstace('Filling', NewDrawing'Square'{
				Size = BaseSize - Vector2.new(0, 85);
				Position = BasePosition + Vector2.new(0, 85);
				Filled = true;
				Color = Colors.Secondary.Main;
				Transparency= .5;
				Visible = true;
			});
	
			local CPos = 0;
	
			GetTableData(Options)(function(i, v)
				if typeof(v.Value) == 'boolean' and not IsStringEmpty(v.Text) and v.Text ~= nil then
					CPos = CPos + 25;
					local BaseSize = Vector2.new(BaseSize.X, 30);
					local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(30, v.Index * 25 - 10);
					UIButtons[#UIButtons + 1] = {
						Option = v;
						Instance = Menu:AddMenuInstace(Format('%s_Hitbox', v.Name), NewDrawing'Square'{
							Position = BasePosition - Vector2.new(30, 15);
							Size = BaseSize;
							Visible = false;
						});
					};
					Menu:AddMenuInstace(Format('%s_OuterCircle', v.Name), NewDrawing'Circle'{
						Radius = 10;
						Position = BasePosition;
						Color = Colors.Secondary.Light;
						Filled = true;
						Visible = true;
					});
					Menu:AddMenuInstace(Format('%s_InnerCircle', v.Name), NewDrawing'Circle'{
						Radius = 7;
						Position = BasePosition;
						Color = Colors.Secondary.Dark;
						Filled = true;
						Visible = v.Value;
					});
					Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
						Text = v.Text;
						Size = 20;
						Position = BasePosition + Vector2.new(20, -10);
						Visible = true;
						Color = Colors.Primary.Dark;
					});
				end
			end)
			GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
				if typeof(v.Value) == 'number' then
					CPos = CPos + 25;
	
					local BaseSize = Vector2.new(BaseSize.X, 30);
					local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(0, CPos - 10);
	
					local Text = Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
						Text = v.Text;
						Size = 20;
						Position = BasePosition + Vector2.new(20, -10);
						Visible = true;
						Color = Colors.Primary.Dark;
					});
					local AMT = Menu:AddMenuInstace(Format('%s_AmountText', v.Name), NewDrawing'Text'{
						Text = tostring(v.Value);
						Size = 20;
						Position = BasePosition;
						Visible = true;
						Color = Colors.Primary.Dark;
					});
					local Line = Menu:AddMenuInstace(Format('%s_SliderLine', v.Name), NewDrawing'Line'{
						Transparency = 1;
						Color = Colors.Primary.Dark;
						Thickness = 3;
						Visible = true;
						From = BasePosition + Vector2.new(20, 20);
						To = BasePosition + Vector2.new(BaseSize.X - 10, 20);
					});
					CPos = CPos + 10;
					local Slider = Menu:AddMenuInstace(Format('%s_Slider', v.Name), NewDrawing'Circle'{
						Visible = true;
						Filled = true;
						Radius = 6;
						Color = Colors.Secondary.Dark;
						Position = BasePosition + Vector2.new(35, 20);
					})
	
					local CSlider = {Slider = Slider; Line = Line; Min = v.AllArgs[4]; Max = v.AllArgs[5]; Option = v};
					Sliders[#Sliders + 1] = CSlider;
	
					-- local Percent = (v.Value / CSlider.Max) * 100;
					-- local Size = math.abs(Line.From.X - Line.To.X);
					-- local Value = Size * (Percent / 100); -- this shit's inaccurate but fuck it i'm not even gonna bother fixing it
	
					Slider.Position = BasePosition + Vector2.new(40, 20);
	
					v.BaseSize = BaseSize;
					v.BasePosition = BasePosition;
					AMT.Position = BasePosition + Vector2.new(BaseSize.X - AMT.TextBounds.X - 10, -10)
				end
			end)
			GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
				if typeof(v.Value) == 'EnumItem' then
					CPos = CPos + 30;
	
					local BaseSize = Vector2.new(BaseSize.X, 30);
					local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(0, CPos - 10);
	
					UIButtons[#UIButtons + 1] = {
						Option = v;
						Instance = Menu:AddMenuInstace(Format('%s_Hitbox', v.Name), NewDrawing'Square'{
							Size = Vector2.new(BaseSize.X, 20) - Vector2.new(30, 0);
							Visible = true;
							Transparency= .5;
							Position = BasePosition + Vector2.new(15, -10);
							Color = Colors.Secondary.Light;
							Filled = true;
						});
					};
					local Text = Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
						Text = v.Text;
						Size = 20;
						Position = BasePosition + Vector2.new(20, -10);
						Visible = true;
						Color = Colors.Primary.Dark;
					});
					local BindText = Menu:AddMenuInstace(Format('%s_BindText', v.Name), NewDrawing'Text'{
						Text = tostring(v.Value):match'%w+%.%w+%.(.+)';
						Size = 20;
						Position = BasePosition;
						Visible = true;
						Color = Colors.Primary.Dark;
					});
	
					Options[i].BaseSize = BaseSize;
					Options[i].BasePosition = BasePosition;
					BindText.Position = BasePosition + Vector2.new(BaseSize.X - BindText.TextBounds.X - 20, -10);
				end
			end)
			GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
				if typeof(v.Value) == 'function' then
					local BaseSize = Vector2.new(BaseSize.X, 30);
					local BasePosition = shared.MenuDrawingData.Instances.Filling.Position + Vector2.new(0, CPos + (25 * v.AllArgs[4]) - 35);
	
					UIButtons[#UIButtons + 1] = {
						Option = v;
						Instance = Menu:AddMenuInstace(Format('%s_Hitbox', v.Name), NewDrawing'Square'{
							Size = Vector2.new(BaseSize.X, 20) - Vector2.new(30, 0);
							Visible = true;
							Transparency= .5;
							Position = BasePosition + Vector2.new(15, -10);
							Color = Colors.Secondary.Light;
							Filled = true;
						});
					};
					local Text = Menu:AddMenuInstace(Format('%s_Text', v.Name), NewDrawing'Text'{
						Text = v.Text;
						Size = 20;
						Position = BasePosition + Vector2.new(20, -10);
						Visible = true;
						Color = Colors.Primary.Dark;
					});
	
					-- BindText.Position = BasePosition + Vector2.new(BaseSize.X - BindText.TextBounds.X - 10, -10);
				end
			end)
	
			delay(.1, function()
				MenuLoaded = true;
			end);
	
			-- this has to be at the bottom cuz proto drawing api doesnt have zindex :triumph:
			Menu:AddMenuInstace('Cursor1', NewDrawing'Line'{
				Visible = false;
				Color = Color3.new(1, 0, 0);
				Transparency = 1;
				Thickness = 2;
			});
			Menu:AddMenuInstace('Cursor2', NewDrawing'Line'{
				Visible = false;
				Color = Color3.new(1, 0, 0);
				Transparency = 1;
				Thickness = 2;
			});
			Menu:AddMenuInstace('Cursor3', NewDrawing'Line'{
				Visible = false;
				Color = Color3.new(1, 0, 0);
				Transparency = 1;
				Thickness = 2;
			});
		end
	
		CreateMenu();
	
		shared.InputBeganCon = UserInputService.InputBegan:connect(function(input)
			if input.UserInputType.Name == 'MouseButton1' and Options.MenuOpen.Value then
				MouseHeld = true;
				local Bar = Menu:GetInstance'TopBar';
				local Values = {
					Bar.Position.X;
					Bar.Position.Y;
					Bar.Position.X + Bar.Size.X;
					Bar.Position.Y + Bar.Size.Y;
				}
				if MouseHoveringOver(Values) and not syn then -- disable dragging for synapse cuz idk why it breaks
					DraggingUI = true;
					DragOffset = Menu:GetInstance'Main'.Position - GetMouseLocation();
				else
					for i, v in pairs(Sliders) do
						local Values = {
							v.Line.From.X - (v.Slider.Radius);
							v.Line.From.Y - (v.Slider.Radius);
							v.Line.To.X + (v.Slider.Radius);
							v.Line.To.Y + (v.Slider.Radius);
						};
						if MouseHoveringOver(Values) then
							DraggingWhat = v;
							Dragging = true;
							break
						end
					end
				end
			end
		end)
		shared.InputEndedCon = UserInputService.InputEnded:connect(function(input)
			if input.UserInputType.Name == 'MouseButton1' and Options.MenuOpen.Value then
				MouseHeld = false;
				for i, v in pairs(UIButtons) do
					local Values = {
						v.Instance.Position.X;
						v.Instance.Position.Y;
						v.Instance.Position.X + v.Instance.Size.X;
						v.Instance.Position.Y + v.Instance.Size.Y;
					};
					if MouseHoveringOver(Values) then
						v.Option();
						break -- prevent clicking 2 options
					end
				end
			elseif input.UserInputType.Name == 'Keyboard' then
				if Binding then
					BindedKey = input.KeyCode;
					Binding = false;
				elseif input.KeyCode == Options.MenuKey.Value or (input.KeyCode == Enum.KeyCode.Home and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl)) then
					Options.MenuOpen();
				end
			end
		end)
	
		function ToggleMenu()
			if Options.MenuOpen.Value then
				GetTableData(shared.MenuDrawingData.Instances)(function(i, v)
					if OldData[v] then
						pcall(Set, v, 'Visible', true);
					end
				end)
			else
				-- GUIService:SetMenuIsOpen(false);
				GetTableData(shared.MenuDrawingData.Instances)(function(i, v)
					if v.Visible == true then
						OldData[v] = true;
						pcall(Set, v, 'Visible', false);
					end
				end)
			end
		end
	
		function CheckRay(Player, Distance, Position, Unit)
			local Pass = true;
	
			if Distance > 999 then return false; end
	
			local _Ray = Ray.new(Position, Unit * Distance);
	
			local List = {LocalPlayer.Character, Camera, Mouse.TargetFilter};
	
			for i,v in pairs(IgnoreList) do table.insert(List, v); end;
	
			local Hit = workspace:FindPartOnRayWithIgnoreList(_Ray, List);
			if Hit and not Hit:IsDescendantOf(Player.Character) then
				Pass = false;
				if Hit.Transparency >= .3 or not Hit.CanCollide and Hit.ClassName ~= Terrain then -- Detect invisible walls
					IgnoreList[#IgnoreList + 1] = Hit;
				end
			end
	
			return Pass;
		end
	
		function CheckPlayer(Player)
			if not Options.Enabled.Value then return false end
	
			local Pass = true;
			local Distance = 0;
	
			if Player ~= LocalPlayer and Player.Character then
				if not Options.ShowTeam.Value and Player.TeamColor == LocalPlayer.TeamColor then
					Pass = false;
				end
	
				local Head = Player.Character:FindFirstChild'Head';
	
				if Pass and Player.Character and Head then
					Distance = (Camera.CFrame.p - Head.Position).magnitude;
					if Options.VisCheck.Value then
						Pass = CheckRay(Player, Distance, Camera.CFrame.p, (Head.Position - Camera.CFrame.p).unit);
					end
					if Distance > Options.MaxDistance.Value then
						Pass = false;
					end
				end
			else
				Pass = false;
			end
	
			return Pass, Distance;
		end
	
		function UpdatePlayerData()
			if (tick() - LastRefresh) > (Options.RefreshRate.Value / 1000) then
				LastRefresh = tick();
				for i, v in pairs(Players:GetPlayers()) do
					local Data = shared.PlayerData[v.Name] or { Instances = {} };
	
					Data.Instances['Box'] = Data.Instances['Box'] or LineBox:Create{Thickness = 3};
					Data.Instances['Tracer'] = Data.Instances['Tracer'] or NewDrawing'Line'{
						Transparency = 1;
						Thickness = 2;
					}
					Data.Instances['HeadDot'] = Data.Instances['HeadDot'] or NewDrawing'Circle'{
						Filled = true;
						NumSides = 30;
					}
					Data.Instances['NameTag'] = Data.Instances['NameTag'] or NewDrawing'Text'{
						Size = Options.TextSize.Value;
						Center = true;
						Outline = Options.TextOutline.Value;
						Visible = true;
					};
					Data.Instances['DistanceHealthTag'] = Data.Instances['DistanceHealthTag'] or NewDrawing'Text'{
						Size = Options.TextSize.Value - 1;
						Center = true;
						Outline = Options.TextOutline.Value;
						Visible = true;
					};
	
					local NameTag = Data.Instances['NameTag'];
					local DistanceTag = Data.Instances['DistanceHealthTag'];
					local Tracer = Data.Instances['Tracer'];
					local HeadDot = Data.Instances['HeadDot'];
					local Box = Data.Instances['Box'];
	
					local Pass, Distance = CheckPlayer(v);
	
					if Pass and v.Character then
						Data.LastUpdate = tick();
						local Humanoid = v.Character:FindFirstChildOfClass'Humanoid';
						local Head = v.Character:FindFirstChild'Head';
						local HumanoidRootPart = v.Character:FindFirstChild'HumanoidRootPart';
						if v.Character ~= nil and Head then
							local ScreenPosition, Vis = Camera:WorldToViewportPoint(Head.Position);
							if Vis then
								local Color = v.TeamColor == LocalPlayer.TeamColor and Green or Red;
	
								local ScreenPositionUpper = Camera:WorldToViewportPoint(Head.CFrame * CFrame.new(0, Head.Size.Y, 0).p);
								local Scale = Head.Size.Y / 2;
	
								if Options.ShowName.Value then
									NameTag.Visible = true;
									NameTag.Text = v.Name;
									NameTag.Size = Options.TextSize.Value;
									NameTag.Outline = Options.TextOutline.Value;
									NameTag.Position = Vector2.new(ScreenPositionUpper.X, ScreenPositionUpper.Y);
									NameTag.Color = Color;
									if Drawing.Fonts then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
										NameTag.Font = Drawing.Fonts.UI;
									end
								else
									NameTag.Visible = false;
								end
								if Options.ShowDistance.Value or Options.ShowHealth.Value then
									DistanceTag.Visible = true;
									DistanceTag.Size = Options.TextSize.Value - 1;
									DistanceTag.Outline = Options.TextOutline.Value;
									DistanceTag.Color = Color3.new(1, 1, 1);
									if Drawing.Fonts then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
										NameTag.Font = Drawing.Fonts.UI;
									end
	
									local Str = '';
	
									if Options.ShowDistance.Value then
										Str = Str .. Format('[%d] ', Distance);
									end
									if Options.ShowHealth.Value and Humanoid then
										Str = Str .. Format('[%d/100]', Humanoid.Health / Humanoid.MaxHealth * 100);
									end
	
									DistanceTag.Text = Str;
									DistanceTag.Position = Vector2.new(ScreenPositionUpper.X, ScreenPositionUpper.Y) + Vector2.new(0, NameTag.Size);
								else
									DistanceTag.Visible = false;
								end
								if Options.ShowDot.Value then
									local Top = Camera:WorldToViewportPoint((Head.CFrame * CFrame.new(0, Scale, 0)).p);
									local Bottom = Camera:WorldToViewportPoint((Head.CFrame * CFrame.new(0, -Scale, 0)).p);
									local Radius = (Top - Bottom).y;
	
									HeadDot.Visible = true;
									HeadDot.Color = Color;
									HeadDot.Position = Vector2.new(ScreenPosition.X, ScreenPosition.Y);
									HeadDot.Radius = Radius;
								else
									HeadDot.Visible = false;
								end
								if Options.ShowTracers.Value then
									Tracer.Visible = true;
									Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y);
									Tracer.To = Vector2.new(ScreenPosition.X, ScreenPosition.Y);
									Tracer.Color = Color;
								else
									Tracer.Visible = false;
								end
								if Options.ShowBoxes.Value and HumanoidRootPart then
									Box:Update(HumanoidRootPart.CFrame, Vector3.new(2, 3, 0) * (Scale * 2), Color);
								else
									Box:SetVisible(false);
								end
							else
								NameTag.Visible = false;
								DistanceTag.Visible = false;
								Tracer.Visible = false;
								HeadDot.Visible = false;
	
								Box:SetVisible(false);
							end
						end
					else
						NameTag.Visible = false;
						DistanceTag.Visible = false;
						Tracer.Visible = false;
						HeadDot.Visible = false;
	
						Box:SetVisible(false);
					end
	
					shared.PlayerData[v.Name] = Data;
				end
			end
		end
	
		function Update()
			for i, v in pairs(shared.PlayerData) do
				if not Players:FindFirstChild(tostring(i)) then
					GetTableData(v.Instances)(function(i, obj)
						obj.Visible = false;
						obj:Remove();
						v.Instances[i] = nil;
					end)
					shared.PlayerData[i] = nil;
				end
			end
	
			local CX = Menu:GetInstance'CrosshairX';
			local CY = Menu:GetInstance'CrosshairY';
			if Options.Crosshair.Value then
				CX.Visible = true;
				CY.Visible = true;
	
				CX.To = Vector2.new((Camera.ViewportSize.X / 2) - 8, (Camera.ViewportSize.Y / 2));
				CX.From = Vector2.new((Camera.ViewportSize.X / 2) + 8, (Camera.ViewportSize.Y / 2));
				CY.To = Vector2.new((Camera.ViewportSize.X / 2), (Camera.ViewportSize.Y / 2) - 8);
				CY.From = Vector2.new((Camera.ViewportSize.X / 2), (Camera.ViewportSize.Y / 2) + 8);
			else
				CX.Visible = false;
				CY.Visible = false;
			end
	
			if Options.MenuOpen.Value and MenuLoaded then
				local MLocation = GetMouseLocation();
				shared.MenuDrawingData.Instances.Main.Color = Color3.fromHSV(tick() * 24 % 255/255, 1, 1);
				local MainInstance = Menu:GetInstance'Main';
				local Values = {
					MainInstance.Position.X;
					MainInstance.Position.Y;
					MainInstance.Position.X + MainInstance.Size.X;
					MainInstance.Position.Y + MainInstance.Size.Y;
				};
				if MainInstance and MouseHoveringOver(Values) then
					Debounce.CursorVis = true;
					-- GUIService:SetMenuIsOpen(true);
					Menu:UpdateMenuInstance'Cursor1'{
						Visible = true;
						From = Vector2.new(MLocation.x, MLocation.y);
						To = Vector2.new(MLocation.x + 5, MLocation.y + 6);
					}
					Menu:UpdateMenuInstance'Cursor2'{
						Visible = true;
						From = Vector2.new(MLocation.x, MLocation.y);
						To = Vector2.new(MLocation.x, MLocation.y + 8);
					}
					Menu:UpdateMenuInstance'Cursor3'{
						Visible = true;
						From = Vector2.new(MLocation.x, MLocation.y + 6);
						To = Vector2.new(MLocation.x + 5, MLocation.y + 5);
					}
				else
					if Debounce.CursorVis then
						Debounce.CursorVis = false;
						-- GUIService:SetMenuIsOpen(false);
						Menu:UpdateMenuInstance'Cursor1'{Visible = false};
						Menu:UpdateMenuInstance'Cursor2'{Visible = false};
						Menu:UpdateMenuInstance'Cursor3'{Visible = false};
					end
				end
				if MouseHeld then
					if Dragging then
						DraggingWhat.Slider.Position = Vector2.new(math.clamp(MLocation.X, DraggingWhat.Line.From.X, DraggingWhat.Line.To.X), DraggingWhat.Slider.Position.Y);
						local Percent = (DraggingWhat.Slider.Position.X - DraggingWhat.Line.From.X) / ((DraggingWhat.Line.To.X - DraggingWhat.Line.From.X));
						local Value = CalculateValue(DraggingWhat.Min, DraggingWhat.Max, Percent);
						DraggingWhat.Option(Value);
					elseif DraggingUI then
						Debounce.UIDrag = true;
						local Main = Menu:GetInstance'Main';
						local MousePos = GetMouseLocation();
						Main.Position = MousePos + DragOffset;
					end
				else
					Dragging = false;
					if DraggingUI and Debounce.UIDrag then
						Debounce.UIDrag = false;
						DraggingUI = false;
						CreateMenu(Menu:GetInstance'Main'.Position);
					end
				end
				if not Debounce.Menu then
					Debounce.Menu = true;
					ToggleMenu();
				end
			elseif Debounce.Menu and not Options.MenuOpen.Value then
				Debounce.Menu = false;
				ToggleMenu();
			end
		end
	
		RunService:UnbindFromRenderStep(GetDataName);
		RunService:UnbindFromRenderStep(UpdateName);
	
		RunService:BindToRenderStep(GetDataName, 1, UpdatePlayerData);
		RunService:BindToRenderStep(UpdateName, 1, Update);
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(CZHWWB_fake_script)()
local function FLXQM_fake_script() -- JP.LocalScript 
	local script = Instance.new('LocalScript', JP)

	TextBox = script.Parent
	
	TextBox.FocusLost:Connect(function(enterPressed, inputThatCausedFocusLost)
		if enterPressed then
			script.Parent.Parent.Number2.Text = TextBox.Text
		else
			script.Parent.Parent.Number2.Text = TextBox.Text
		end
	end)
end
coroutine.wrap(FLXQM_fake_script)()
local function CRSR_fake_script() -- Walkspeed.LocalScript 
	local script = Instance.new('LocalScript', Walkspeed)

	script.Parent.MouseButton1Click:Connect(function()
		local player = game.Players.LocalPlayer
		local setspeed = script.Parent.Parent.Walkspeed2.Text
		local hum = game.Workspace:WaitForChild(player.Name).Humanoid
		if hum then
			hum.WalkSpeed = setspeed
		end
	end)
end
coroutine.wrap(CRSR_fake_script)()
local function CJMSA_fake_script() -- JumpPower.LocalScript 
	local script = Instance.new('LocalScript', JumpPower)

	script.Parent.MouseButton1Click:Connect(function()
		local player = game.Players.LocalPlayer
		local setjump = script.Parent.Parent.JP.Text
		local hum = game.Workspace:WaitForChild(player.Name).Humanoid
		if hum then
			hum.JumpPower = setjump
		end
	end)
end
coroutine.wrap(CJMSA_fake_script)()
local function JVNUR_fake_script() -- Fly.LocalScript 
	local script = Instance.new('LocalScript', Fly)

	function leftClick()
	repeat wait()
	until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("UpperTorso") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid")
	local mouse = game.Players.LocalPlayer:GetMouse()
	repeat wait() until mouse
	local plr = game.Players.LocalPlayer
	local UpperTorso = plr.Character.UpperTorso
	local flying = true
	local deb = true
	local ctrl = {f = 0, b = 0, l = 0, r = 0}
	local lastctrl = {f = 0, b = 0, l = 0, r = 0}
	local maxspeed = 50
	local speed = 0
	
	function Fly()
		local bg = Instance.new("BodyGyro", UpperTorso)
		bg.P = 9e4
		bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		bg.cframe = UpperTorso.CFrame
		local bv = Instance.new("BodyVelocity", UpperTorso)
		bv.velocity = Vector3.new(0,0.1,0)
		bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
		repeat wait()
			plr.Character.Humanoid.PlatformStand = true
			if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
				speed = speed+.5+(speed/maxspeed)
				if speed > maxspeed then
					speed = maxspeed
				end
			elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
				speed = speed-1
				if speed < 0 then
					speed = 0
				end
			end
			if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
				bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
				lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
			elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
				bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
			else
				bv.velocity = Vector3.new(0,0.1,0)
			end
			bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
		until not flying
		ctrl = {f = 0, b = 0, l = 0, r = 0}
		lastctrl = {f = 0, b = 0, l = 0, r = 0}
		speed = 0
		bg:Destroy()
		bv:Destroy()
		plr.Character.Humanoid.PlatformStand = false
	end
	mouse.KeyDown:connect(function(key)
		if key:lower() == "e" then
			if flying then flying = false
			else
				flying = true
				Fly()
			end
		elseif key:lower() == "w" then
			ctrl.f = 1
		elseif key:lower() == "s" then
			ctrl.b = -1
		elseif key:lower() == "a" then
			ctrl.l = -1
		elseif key:lower() == "d" then
			ctrl.r = 1
		end
	end)
	mouse.KeyUp:connect(function(key)
		if key:lower() == "w" then
			ctrl.f = 0
		elseif key:lower() == "s" then
			ctrl.b = 0
		elseif key:lower() == "a" then
			ctrl.l = 0
		elseif key:lower() == "d" then
			ctrl.r = 0
		end
	end)
	Fly()
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(JVNUR_fake_script)()
local function BOQFI_fake_script() -- Noclip.LocalScript 
	local script = Instance.new('LocalScript', Noclip)

	function leftClick()
	   local player = game.Players.LocalPlayer.Character
	   local la = player["Left Arm"]
	   local ra = player["Right Arm"]
	   local h = player["Head"]
	   local t = player["Torso"]
	   local ll = player["Left Leg"]
	   local rl = player["Right Leg"]
		la.CanCollide = false
		ra.CanCollide = false
		h.CanCollide = false
		t.CanCollide = false
		ll.CanCollide = false
		rl.CanCollide = false
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(BOQFI_fake_script)()
local function BJJZDH_fake_script() -- Walkspeed2.LocalScript 
	local script = Instance.new('LocalScript', Walkspeed2)

	TextBox = script.Parent
	
	TextBox.FocusLost:Connect(function(enterPressed, inputThatCausedFocusLost)
		if enterPressed then
			script.Parent.Parent.Number.Text = TextBox.Text
		else
			script.Parent.Parent.Number.Text = TextBox.Text
		end
	end)
end
coroutine.wrap(BJJZDH_fake_script)()
local function DPKA_fake_script() -- CMDX.LocalScript 
	local script = Instance.new('LocalScript', CMDX)

	function leftClick()
		loadstring(game:HttpGet("https://pastebin.com/raw/HFkyyd1H",true))()
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(DPKA_fake_script)()
local function LSZXE_fake_script() -- infiniteyield.LocalScript 
	local script = Instance.new('LocalScript', infiniteyield)

	function leftClick()
		loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source')))()
	end
	
	script.Parent.MouseButton1Click:Connect(leftClick)
end
coroutine.wrap(LSZXE_fake_script)()
local function WBXRUD_fake_script() -- Scripts.LocalScript 
	local script = Instance.new('LocalScript', Scripts)

	local UIS = game:GetService("UserInputService")
	local gui = script.Parent.Parent.Main
	
	UIS.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == Enum.KeyCode.Q then --User pressed Q
			if gui.Position == UDim2.new(0.185, 0, 0.188, 0) then --If open
				gui:TweenPosition(UDim2.new(0.382, 0, 1.229, 0)) --Close UI
			else --Is closed
				gui:TweenPosition(UDim2.new(0.185, 0, 0.188, 0)) --Open UI
			end
		end
	end)
end
coroutine.wrap(WBXRUD_fake_script)()
